@using BugIssuer.Domain.Enums;
@using BugIssuer.Web.Extensions;
@using Markdig;

@model IssueViewModel

@{
    ViewData["Title"] = "Issue" + Model.Issue.IssueId;
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Issue Description</h2>
        <div>
            @if (Model.IsAuthor || Model.IsAdmin)
            {
                <a href="@Url.Action("EditIssue", new { issueId = Model.Issue.IssueId })" class="btn btn-outline-primary">Edit</a>
            }

            @if (Model.Issue.Status != Status.Deleted)
            {
                <button class="btn btn-danger" id="delete-button">Delete</button>
            }
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header">
            <div class="d-flex justify-content-between">
                <div class="card-title w-100">
                    <h3>@Model.Issue.Title</h3>
                    <div class="badge-container mt-2">
                        <span class="badge badge-secondary">@Model.Issue.Category</span>
                        <span class="@Badge.LabelToBadge(Model.Issue.Label)">@Model.Issue.Label</span>
                        <span class="@Badge.UrgencyToBadge(Model.Issue.Urgency)">@Model.Issue.Urgency</span>
                        <span class="@Badge.StatusToBadge(Model.Issue.Status)">@Model.Issue.Status</span>
                    </div>
                    <br />
                    <strong>Assignee:</strong> @Model.Issue.Assignee
                </div>
                <div class="text-muted">
                    <div>@Model.Issue.AuthorId</div>
                    <div>@Model.Issue.Author</div>
                    <div>@Model.Issue.LastUpdateDate</div>
                    <div>@Model.Issue.LastUpdateTime</div>
                </div>
            </div>
        </div>
        <div class="card-body">
            <p>@Html.Raw(Markdown.ToHtml(Model.Issue.Description))</p>
        </div>
        @foreach (var comment in Model.Issue.Comments)
        {
            <div class="card-header">
                <div class="d-flex justify-content-between">
                    <h5># @comment.CommentId</h5>
                    <div class="text-muted">
                        <div>@comment.AuthorId</div>
                        <div>@comment.Author</div>
                        <div>@comment.LastUpdateDate</div>
                        <div>@comment.LastUpdateTime</div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <p>@Html.Raw(Markdown.ToHtml(comment.Content))</p>
            </div>
        }
        <div class="card-footer">
            <form id="new-comment-form" asp-action="NewComment" method="post">
                <div class="form-group">
                    <textarea id="CommentContent" name="CommentContent" class="form-control" placeholder="Enter Comment"></textarea>
                </div>
                <div class="form-group">
                    <input type="hidden" id="IssueId" name="IssueId" class="form-control" value="@Model.Issue.IssueId" />
                </div>
                <button type="submit" class="btn btn-success" id="post-button" name="post-button">Post</button>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/simplemde/latest/simplemde.min.css">

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var simplemde = new SimpleMDE({
            element: document.getElementById("CommentContent"),
            spellChecker: false,
            status: false,
        });

        simplemde.codemirror.on("drop", function (editor, event) {
            event.preventDefault();
            var files = event.dataTransfer.files;
            handleFiles(files);
        });

        simplemde.codemirror.on("paste", function (editor, event) {
            var items = (event.clipboardData || event.originalEvent.clipboardData).items;
            for (var index in items) {
                var item = items[index];
                if (item.kind === 'file') {
                    var blob = item.getAsFile();
                    handleFiles([blob]);
                }
            }
        });

        function handleFiles(files) {
            for (var i = 0; i < files.length; i++) {
                uploadFile(files[i]);
            }
        }

        function uploadFile(file) {
            var formData = new FormData();
            formData.append("file", file);

            fetch('/Issues/UploadImage', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    var cm = simplemde.codemirror;
                    var doc = cm.getDoc();
                    var cursor = doc.getCursor();
                    doc.replaceRange("![Image](" + data.url + ")", cursor);
                } else {
                    alert("Failed to upload image");
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert("Failed to upload image");
            });
        }

        document.getElementById("delete-button").addEventListener("click", function () {
            if (confirm("Are you sure you want to delete this issue?")) {
                var id = Number(document.getElementById("IssueId").value);

                fetch('/Issues/DeleteIssue', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ IssueId: id })
                })
                    .then(response => {
                        if (response.ok) {
                            window.location.href = "/Issues";
                        } else {
                            alert("Failed to delete issue");
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting issue', error);
                    });
            }
        });

        document.getElementById("new-comment-form").addEventListener("submit", function (event) {
            event.preventDefault();

            const issueId = document.querySelector("#IssueId").value;
            const content = simplemde.value();

            const formData = {
                IssueId: issueId,
                CommentContent: content
            };

            fetch('/Issues/NewComment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                } else {
                    return response.text().then(text => {
                        alert("Failed to post comment: " + text);
                        throw new Error("Failed to post comment: " + text);
                    });
                }
            })
            .catch(error => {
                console.error('Error posting comment', error);
            });
        });
    });
</script>